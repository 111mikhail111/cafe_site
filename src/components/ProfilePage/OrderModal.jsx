"use client";
import { useState, useEffect } from "react";
import styles from "./OrderModal.module.css";
import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
import fontkit from "@pdf-lib/fontkit";

const OrderModal = ({ order, onClose }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
  }, []);

  const formatDate = (dateString) => {
    if (!dateString) return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
    try {
      const date = new Date(dateString);
      return new Intl.DateTimeFormat("ru-RU", {
        day: "numeric",
        month: "long",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      }).format(date);
    } catch {
      return dateString;
    }
  };

  const getStatusInfo = (status) => {
    switch (status) {
      case "completed":
        return { text: "–ó–∞–≤–µ—Ä—à–µ–Ω", color: "#4CAF50", icon: "‚úì" };
      case "in_progress":
        return { text: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", color: "#FFC107", icon: "üîÑ" };
      case "canceled":
        return { text: "–û—Ç–º–µ–Ω–µ–Ω", color: "#F44336", icon: "‚úï" };
      default:
        return { text: "–ù–æ–≤—ã–π", color: "#2196F3", icon: "üÜï" };
    }
  };

  const statusInfo = getStatusInfo(order.stat);

  const handleClose = () => {
    setIsVisible(false);
    setTimeout(onClose, 300);
  };

  if (!order) return null;
  // else console.log("–∑–∞–∫–∞–∑–∏–∫", order); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª–∏–º –∫–æ–Ω—Å–æ–ª—å

  return (
    <div
      className={`${styles.modalOverlay} ${isVisible ? styles.visible : ""}`}
      onClick={handleClose} // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    >
      <div
        className={styles.modalContainer}
        onClick={(e) => e.stopPropagation()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏
      >
        <button className={styles.closeButton} onClick={handleClose}>
          &times;
        </button>

        <div className={styles.modalHeader}>
          <h2>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}</h2>
          <div
            className={styles.statusBadge}
            style={{ backgroundColor: statusInfo.color }}
          >
            <span className={styles.statusIcon}>{statusInfo.icon}</span>
            {statusInfo.text}
          </div>
        </div>

        

        <div className={styles.orderTimeline}>
          <div className={styles.timelineItem}>
            <div
              className={styles.timelineDot}
              style={{ backgroundColor: "#4CAF50" }}
            ></div>
            <div className={styles.timelineContent}>
              <h4>–°–æ–∑–¥–∞–Ω</h4>
              <p>{formatDate(order.timecr)}</p>
            </div>
          </div>

          <div className={styles.timelineItem}>
            <div
              className={styles.timelineDot}
              style={{
                backgroundColor: order.timetook ? "#4CAF50" : "#BDBDBD",
              }}
            ></div>
            <div className={styles.timelineContent}>
              <h4>–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</h4>
              <p>{formatDate(order.timetook)}</p>
            </div>
          </div>

          <div className={styles.timelineItem}>
            <div
              className={styles.timelineDot}
              style={{
                backgroundColor: order.timedone ? "#4CAF50" : "#BDBDBD",
              }}
            ></div>
            <div className={styles.timelineContent}>
              <h4>–ó–∞–≤–µ—Ä—à–µ–Ω</h4>
              <p>{formatDate(order.timedone)}</p>
            </div>
          </div>
        </div>

        {/* –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
        <div className={styles.productsList}>
          <h3>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</h3>
          <div className={styles.productsHeader}>
            <span>–ù–∞–∑–≤–∞–Ω–∏–µ</span>
            <span>–ö–æ–ª-–≤–æ</span>
            <span>–°—É–º–º–∞</span>
          </div>
          {order.products && order.products.length > 0 ? (
            order.products.map((item) => (
              <div key={item.id} className={styles.productItem}>
                <span className={styles.productName}>{item.name}</span>
                <span className={styles.productAmount}>{item.amount} —à—Ç.</span>
                <span className={styles.productPrice}>
                  {(item.price * item.amount).toFixed(2)} ‚ÇΩ
                </span>
              </div>
            ))
          ) : (
            <p>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.</p>
          )}
        </div>
        {/* –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}

        <div className={styles.orderSummary}>
          <div className={styles.summaryItem}>
            <span>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
            <span>{order.amount} —à—Ç.</span>
          </div>
          <div className={styles.summaryItem}>
            <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</span>
            <span className={styles.totalPrice}>{order.sum.toFixed(2)} ‚ÇΩ</span>
          </div>
        </div>

        <div className={styles.modalActions}>
          <button
            className={styles.printButton}
            onClick={() => generateOrderPDF(order)}
          >
            <span className={styles.buttonIcon}>üñ®Ô∏è</span>
            –ü–µ—á–∞—Ç—å
          </button>
          <button className={styles.closeModalButton} onClick={handleClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderModal;

// –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ formatDate, getStatusInfo, generateOrderPDF –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
const formatDate = (dateString) => {
  if (!dateString) return "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ";
  try {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("ru-RU", {
      day: "numeric",
      month: "long",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    }).format(date);
  } catch {
    return dateString;
  }
};

const getStatusInfo = (status) => {
  switch (status) {
    case "completed":
      return { text: "–ó–∞–≤–µ—Ä—à–µ–Ω", color: "#4CAF50", icon: "‚úì" };
    case "in_progress":
      return { text: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", color: "#FFC107", icon: "üîÑ" };
    case "canceled":
      return { text: "–û—Ç–º–µ–Ω–µ–Ω", color: "#F44336", icon: "‚úï" };
    default:
      return { text: "–ù–æ–≤—ã–π", color: "#2196F3", icon: "üÜï" };
  }
};

const generateOrderPDF = async (order) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
    const pdfDoc = await PDFDocument.create();
    pdfDoc.registerFontkit(fontkit);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏
    const fontUrl = "/fonts/Dimbo Russian.otf";
    const fontResponse = await fetch(fontUrl);
    const fontBytes = await fontResponse.arrayBuffer();

    // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    const font = await pdfDoc.embedFont(fontBytes);
    const fontBold = await pdfDoc.embedFont(fontBytes, {
      customName: "Roboto-Bold", // –ú–æ–∂–Ω–æ –¥–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const page = pdfDoc.addPage([595, 842]); // A4 —Ä–∞–∑–º–µ—Ä –≤ points

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const primaryColor = rgb(41 / 255, 49 / 255, 32 / 255);
    const secondaryColor = rgb(72 / 255, 86 / 255, 56 / 255);
    const margin = 50;
    let yPosition = 800;
    const itemHeight = 15; // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    const tableHeaderHeight = 20; // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    page.drawText(`–ó–∞–∫–∞–∑ #${order.id}`, {
      x: margin,
      y: yPosition,
      size: 20,
      font: fontBold,
      color: primaryColor,
    });
    yPosition -= 30;

    // –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const statusInfo = getStatusInfo(order.stat);
    page.drawText(`–°—Ç–∞—Ç—É—Å: ${statusInfo.text}`, {
      x: margin,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: rgb(
        parseInt(statusInfo.color.slice(1, 3), 16) / 255,
        parseInt(statusInfo.color.slice(3, 5), 16) / 255,
        parseInt(statusInfo.color.slice(5, 7), 16) / 255
      ),
    });
    yPosition -= 30;

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    page.drawText("–ö–ª–∏–µ–Ω—Ç:", {
      x: margin,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: secondaryColor,
    });
    page.drawText(order.client, {
      x: margin + 60, // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
      y: yPosition,
      size: 12,
      font: font,
      color: secondaryColor,
    });
    yPosition -= 30;

    // –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∑–∞–∫–∞–∑–∞
    page.drawText("–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∑–∞–∫–∞–∑–∞:", {
      x: margin,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: secondaryColor,
    });
    yPosition -= 20;

    const timelineData = [
      { label: "–°–æ–∑–¥–∞–Ω", date: formatDate(order.timecr) },
      { label: "–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É", date: formatDate(order.timetook) },
      { label: "–ó–∞–≤–µ—Ä—à–µ–Ω", date: formatDate(order.timedone) },
    ];

    timelineData.forEach((item) => {
      if (yPosition < margin + 30) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = pdfDoc.addPage([595, 842]);
        yPosition = 800 - margin;
      }
      page.drawText(`- ${item.label}:`, {
        x: margin,
        y: yPosition,
        size: 10,
        font: fontBold,
        color: secondaryColor,
      });
      page.drawText(item.date, {
        x: margin + 100,
        y: yPosition,
        size: 10,
        font: font,
        color: secondaryColor,
      });
      yPosition -= 15;
    });
    yPosition -= 15;

    // –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
    page.drawText("–¢–æ–≤–∞—Ä—ã:", { // –ò–∑–º–µ–Ω–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      x: margin,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: secondaryColor,
    });
    yPosition -= 20;

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    if (yPosition < margin + tableHeaderHeight + order.products.length * itemHeight) {
         page = pdfDoc.addPage([595, 842]);
         yPosition = 800 - margin;
    }
    page.drawText("–ù–∞–∑–≤–∞–Ω–∏–µ", {
      x: margin,
      y: yPosition,
      size: 10,
      font: fontBold,
      color: primaryColor,
    });
    page.drawText("–ö–æ–ª-–≤–æ", {
      x: margin + 250,
      y: yPosition,
      size: 10,
      font: fontBold,
      color: primaryColor,
    });
    page.drawText("–°—É–º–º–∞", {
      x: margin + 350,
      y: yPosition,
      size: 10,
      font: fontBold,
      color: primaryColor,
    });
    yPosition -= 15;

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    const orderItems = order.products || [];
    orderItems.forEach((item) => {
       if (yPosition < margin + itemHeight) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         page = pdfDoc.addPage([595, 842]);
         yPosition = 800 - margin;
       }
      page.drawText(item.name, {
        x: margin,
        y: yPosition,
        size: 10,
        font: font,
        color: secondaryColor,
      });
      page.drawText(item.amount.toString(), {
        x: margin + 250,
        y: yPosition,
        size: 10,
        font: font,
        color: secondaryColor,
      });
      page.drawText(`${(item.price * item.amount).toFixed(2)} —Ä.`, {
        x: margin + 350,
        y: yPosition,
        size: 10,
        font: font,
        color: secondaryColor,
      });
      yPosition -= 15;
    });
    yPosition -= 20;

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    if (yPosition < margin + 30) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page = pdfDoc.addPage([595, 842]);
      yPosition = 800 - margin;
    }
    page.drawText("–ò—Ç–æ–≥–æ:", {
      x: margin + 250,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: secondaryColor,
    });
    page.drawText(`${order.sum.toFixed(2)} —Ä—É–±–ª–µ–π`, {
      x: margin + 350,
      y: yPosition,
      size: 12,
      font: fontBold,
      color: primaryColor,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `–ó–∞–∫–∞–∑_${order.id}.pdf`;
    link.click();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:", error);
  }
};